1. Given the above real-world information, use an array data structure to code the following solution.

1a.
INIT members to an empty array
SET members[FIRST INDEX] to Vivian
SET members[SECOND INDEX] to Ava
SET members[THIRD INDEX] to Josh
SET members[FOURTH INDEX] to Patrick
SET members[FIFTH INDEX] to Mike

//Code: let members = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];


1b.
FUNCTION add(name)
    ADD name to the end of of the array
END FUNCTION
//Code:
const add = name => {
    members.push(name);
};

1c.
FUNCTION findMemberIndex(name)
    FIND index of name in members
END FUNCTION
//Code:
let findMemberIndex = name => {
    members.indexOf(name);
};

1d.
FUNCTION isMemberPresent(name)
    FIND name in members array
END FUNCTION
//Code:
let isMemberPresent = name => {
    members.includes(name);
};
//The function should return false if it does not find Emily within the members array

1e.
FUNCTION insertMember(memberOne, memberTwo)
    INSERT memberOne before memberTwo in members array
END FUNCTION
//Code:
let insertMember = (memberOne, memberTwo) => {
    const index = members.indexOf(memberOne);
    members.splice(index, 0, memberTwo);
};

1f.
FUNCTION removeMember(member)
    FIND index of member
    DELETE member from members array
END FUNCTION
//Code:
let removeMember = member => {
    let memberIndex = members.indexOf(member);
    members.splice(memberIndex, 1);
};


2. Provide another real-world example that you can model using a data structure.

Another real life example of a data structure would be the hierarchy of a company, and how each department is organized. You have an executive board, and within the executive board, you have different departments that each board member oversees. People will switch departments, be in charge of hiring and firing employees, and be in charge of promoting or demoting employees. A data structure would be useful to access and organize a company to keep track of changes within.

3. How would your data structure allow developers to access and manipulate the data?

My data structure would allow developers to see within the hierarchy of organization and be able to determine where they need to access specific items because of the way information is nested throughout. It should be logical and make sense to other programmers.